{"version":3,"sources":["store/servers/reducers.ts","store/loading/reducers.ts","store/showerror/reducers.ts","store/index.ts","store/servers/types.ts","store/loading/types.ts","store/showerror/types.ts","components/form/ServerFormInput.tsx","components/loading/Loading.tsx","components/error/DisplayError.tsx","components/form/LoginForm.tsx","utils/hasKey.ts","components/form/ServerForm.tsx","components/server/TopLine.tsx","components/server/NavBarHome.tsx","components/server/NavBarHomeAddServer.tsx","components/server/NavBarHomeEditServer.tsx","components/server/Server.tsx","components/server/ServerList.tsx","components/server/EmptyServer.tsx","components/prompt/ConfirmDialog.tsx","config/index.ts","utils/localStorage.ts","utils/API.ts","utils/authHandler.ts","store/loading/actions.ts","store/showerror/actions.ts","utils/errorHandler.ts","utils/downloadServer.ts","pages/home/HomePage.tsx","store/servers/actions.ts","pages/home/constants.ts","pages/home/index.ts","pages/login/constants.ts","pages/login/index.ts","pages/login/LoginPage.tsx","pages/server/ServerInfoPage.tsx","pages/server/constants.ts","pages/server/index.ts","pages/404/index.ts","pages/404/404Page.tsx","App.tsx","serviceWorker.ts","index.tsx","res/logo.svg","res/logout.svg","res/back.svg","res/server.svg"],"names":["initialState","servers","convertServerToObjects","serverObj","forEach","server","id","isLoading","displayError","message","show","rootReducer","combineReducers","state","action","type","payload","loading","showError","FormType","Loading","className","color","height","width","DisplayError","LoginForm","login","errorMessage","useState","username","setUsername","password","setPassword","formError","setFormError","validate","validPassword","length","validUsername","noError","src","logo","alt","onSubmit","event","preventDefault","placeholder","value","onChange","target","Date","getFullYear","ServerFormInput","label","formType","INPUT","error","htmlFor","TEXTAREA","COUNTRY","classes","valueType","hasKey","obj","key","serverFormBuilder","serverName","serverCountry","serverIp","config","ServerForm","serverId","uploadServer","deleteServer","defaultFormElements","clonedFormElements","Object","assign","keys","getDefaultFormElements","formElements","setFormElements","isNew","console","log","handleChange","formElement","clonedElement","values","map","item","disabled","onClick","clearErrors","valid","isValidForm","newServer","getServer","TopLine","NavBarHome","handleLogout","to","SERVER_ROUTE","logoutIcon","NavBar","HOME_ROUTE","NavBarEditServer","onLogout","handleBackClick","back","Server","ServerList","items","EmptyServer","ConfirmDialog","isOpen","onRequestClose","title","onConfirm","Modal","setAppElement","contentLabel","overlayClassName","CONFIG","TOKEN","DEFAULT_LOGIN_RESPONSE","userId","ttl","created","LOGGED_IN_DEFAULT","loggedIn","setLoggedIn","localStorage","setItem","JSON","stringify","getAPI","API","axios","create","baseURL","response","parse","getItem","getLoginResponse","interceptors","request","use","AxiosLogger","defaults","headers","common","doLogout","post","setLoggedInLocally","token","logOutLocally","toggleLoading","errorHandler","undefined","isAxiosError","axiosErrorHandler","err","data","statusCode","connect","getServers","dispatch","a","get","props","setLoading","serversData","useEffect","history","useHistory","from","useLocation","pathname","LOGIN_ROUTE","hideLoading","deleteLocalDataAndGoToLogin","replace","then","res","catch","HomePage","LoginPage","setErrorMessage","loginBody","realm","useParams","defaultServer","showDeleteDialog","setShowDeleteDialog","setServer","handleError","cachedServer","remoteServer","fromLogin","handleLogOut","resetErrorMessage","handleResponse","resetServer","push","openDeleteConfimDialog","NavBarHomeEditServer","goBack","NavBarHomeAddServer","doAddNewServer","patch","doUpdateServer","delete","ServerInfoPage","Page404","PrivateRoute","children","rest","getLoggedIn","render","location","App","exact","path","component","Boolean","window","hostname","match","store","middlewares","thunkMiddleware","middleWareEnhancer","applyMiddleware","createStore","composeWithDevTools","configureStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.2a5ce6d9.chunk.js","sourcesContent":["import {\r\n    SET_SERVERS,\r\n    ServerState,\r\n    SetServerAction,\r\n    ServersObj,\r\n} from './types';\r\nimport Server from '../../interfaces/Server';\r\n\r\nconst initialState: ServerState = {\r\n    servers: {}\r\n}\r\n\r\nconst convertServerToObjects = (servers: Array<Server>) : ServersObj => {\r\n    const serverObj: ServersObj = {}\r\n    servers.forEach((server) => {\r\n        if(server.id){\r\n            serverObj[server.id] = server\r\n        }\r\n    })\r\n\r\n    return serverObj\r\n}\r\n\r\n\r\nexport const setServerReducer = (state = initialState, action:SetServerAction) : ServerState => {\r\n    switch (action.type) {\r\n        case SET_SERVERS:\r\n          return {\r\n            ...state,\r\n            servers: convertServerToObjects(action.payload)\r\n          };\r\n        default:\r\n          return state;\r\n      }\r\n}","import {\r\n    TOGGLE_LOADING,\r\n    ToggleLoadingState,\r\n    ToggleLoadingAction,\r\n} from './types';\r\n\r\nconst initialState: ToggleLoadingState = {\r\n    isLoading: false\r\n}\r\n\r\n\r\nexport const toggleLoadingReducer = (state = initialState, action:ToggleLoadingAction) : ToggleLoadingState => {\r\n    switch (action.type) {\r\n        case TOGGLE_LOADING:\r\n          return {\r\n            isLoading: action.payload\r\n          };\r\n        default:\r\n          return state;\r\n      }\r\n}","import {\r\n    DISPLAY_ERROR,\r\n    DisplayErrorAction,\r\n    DisplayErrorState,\r\n} from './types';\r\n\r\nconst initialState: DisplayErrorState = {\r\n    displayError: {\r\n      message: '',\r\n      show: false\r\n    }\r\n}\r\n\r\n\r\nexport const displayErrorReducer = (state = initialState, action:DisplayErrorAction) : DisplayErrorState => {\r\n    switch (action.type) {\r\n        case DISPLAY_ERROR:\r\n          return {\r\n            displayError: action.payload\r\n          };\r\n        default:\r\n          return state;\r\n      }\r\n}","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport thunkMiddleware from \"redux-thunk\";\r\nimport { composeWithDevTools } from \"redux-devtools-extension\";\r\n\r\nimport { setServerReducer } from \"./servers/reducers\";\r\nimport { toggleLoadingReducer } from \"./loading/reducers\";\r\nimport { displayErrorReducer} from \"./showerror/reducers\";\r\n\r\nconst rootReducer = combineReducers({\r\n  servers: setServerReducer,\r\n  loading:toggleLoadingReducer,\r\n  showError:displayErrorReducer,\r\n});\r\n\r\nexport type AppState = ReturnType<typeof rootReducer>;\r\n\r\nexport default function configureStore() {\r\n  const middlewares = [thunkMiddleware];\r\n  const middleWareEnhancer = applyMiddleware(...middlewares);\r\n\r\n  const store = createStore(\r\n    rootReducer,\r\n    composeWithDevTools(middleWareEnhancer)\r\n  );\r\n\r\n  return store;\r\n}\r\n","import Server from \"../../interfaces/Server\";\r\n\r\nexport const SET_SERVERS = 'SET_SERVERS';\r\n\r\n\r\nexport interface SetServerAction{\r\n    type: typeof SET_SERVERS,\r\n    payload: Array<Server>\r\n\r\n}\r\n\r\n\r\nexport interface ServersObj {\r\n    [key: string]: Server\r\n}\r\n\r\n\r\nexport interface ServerState{\r\n    servers: ServersObj\r\n}\r\n\r\n\r\n","export const TOGGLE_LOADING = 'TOGGLE_LOADING';\r\n\r\n\r\nexport interface ToggleLoadingAction{\r\n    type: typeof TOGGLE_LOADING,\r\n    payload: boolean\r\n\r\n}\r\n\r\nexport interface ToggleLoadingState{\r\n    isLoading:boolean\r\n}","export const DISPLAY_ERROR = 'DISPLAY_ERROR';\r\n\r\nexport interface DisplayError{\r\n    message?:string,\r\n    show:boolean\r\n}\r\n\r\nexport interface DisplayErrorAction{\r\n    type: typeof DISPLAY_ERROR,\r\n    payload: DisplayError\r\n\r\n}\r\n\r\nexport interface DisplayErrorState{\r\n    displayError:DisplayError\r\n}","import React from 'react';\r\nimport {CountryDropdown} from 'react-country-region-selector';\r\n\r\ninterface ServerFormInputProps {\r\n    id: string\r\n    label: string,\r\n    type: string,\r\n    value: string,\r\n    formType?: FormType,\r\n    error?:boolean\r\n    onChange: (id:string, newValue: string) => void,\r\n}\r\n\r\nexport enum FormType {\r\n    INPUT, TEXTAREA, COUNTRY\r\n}\r\n\r\nconst ServerFormInput = ({ label, type, id, value, onChange, formType = FormType.INPUT, error}: ServerFormInputProps) => {\r\n\r\n\r\n    return (\r\n        <div className=\"server-form-group\">\r\n            <label htmlFor={label}>{label}</label>\r\n            {formType === FormType.INPUT && <input\r\n                className=\"server-form-input\"\r\n                type={type}\r\n                id={id}\r\n                value={value}\r\n                onChange={(event) => onChange(id, event.target.value)} />}\r\n\r\n            {formType === FormType.TEXTAREA && <textarea\r\n                className=\"server-text-area\"\r\n                id={id}\r\n                value={value}\r\n                onChange={(event) => onChange(id, event.target.value)} />}\r\n            {formType === FormType.COUNTRY && <CountryDropdown\r\n                classes=\"server-country-picker\"\r\n                id={id}\r\n                valueType=\"short\"\r\n                value={value}\r\n                onChange={(value) => onChange(id, value)} />}\r\n\r\n            {error && <p className='server-error'>{`The ${label} field is required`}</p>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ServerFormInput;","import React from 'react';\r\nimport ReactLoading from 'react-loading';\r\n\r\n\r\n\r\nconst Loading = ()=>{\r\n    return (\r\n        <div className='loading'>\r\n            <ReactLoading type='cubes'  color='#1DA3B8' height={'20%'} width={'100%'}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Loading;","import React from 'react';\r\n\r\ninterface DisplayErrorProps {\r\n    message: string,\r\n}\r\n\r\nconst DisplayError = ({ message }: DisplayErrorProps) => {\r\n    return (\r\n        <div className=\"error-wrapper\">\r\n            <p className='error-text'>{message}</p>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default DisplayError;","import React, { useState, FormEvent } from 'react';\r\nimport logo from '../../res/logo.svg';\r\nimport { Loading } from '../loading';\r\nimport { DisplayError } from '../error';\r\n\r\ninterface LoginFormProps{\r\n    login: (username:string, password:string)=> void,\r\n    errorMessage?:string,\r\n    loading?:boolean\r\n\r\n}\r\n\r\nconst LoginForm = ({login, errorMessage, loading}: LoginFormProps) => {\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [formError, setFormError] = useState(false);\r\n    const formErrorMessage = 'All fields are required';\r\n\r\n    const handleSubmit = (event: FormEvent) => {\r\n        event.preventDefault();\r\n        if(validate()){\r\n            login(username, password);\r\n        }\r\n    }\r\n\r\n    const validate = () => {\r\n        const validPassword = password.length > 0;\r\n        const validUsername = username.length > 0;\r\n        const noError = (validPassword && validUsername)\r\n        setFormError(!noError)\r\n        return noError;\r\n    }\r\n\r\n    return (\r\n        <div className='form-container'>\r\n            <img src={logo} className='logo' alt='Xeen VPN Logo' />\r\n            <h1 className='text-primary'>XEEN VPN</h1>\r\n            <p className=\"text-secondary\">Welcome back.<br />Please login to your account</p>\r\n            {formError && <DisplayError message={formErrorMessage} />}\r\n            {errorMessage && <DisplayError message={errorMessage} />}\r\n            {loading && <Loading />}\r\n            <form onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                    <input\r\n                        type=\"text\"\r\n                        id=\"username\"\r\n                        placeholder='Username'\r\n                        value={username}\r\n                        onChange={(event) => setUsername(event.target.value)} />\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <input\r\n                        type=\"password\"\r\n                        id=\"password\"\r\n                        placeholder='Password'\r\n                        value={password}\r\n                        onChange={(event) => setPassword(event.target.value)}\r\n                    />\r\n                </div>\r\n                <button type=\"submit\" className=\"btn\">Login</button>\r\n            </form>\r\n            <p className='copyright'>CopyRight &copy;{new Date().getFullYear()}</p>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\nexport default LoginForm;","export function hasKey<O>(obj: O, key: string | number | symbol): key is keyof O {\r\n    return key in obj\r\n  }","import React, { useState } from 'react';\r\n\r\nimport ServerFormInput, { FormType } from './ServerFormInput';\r\n\r\nimport Server from '../../interfaces/Server';\r\nimport { hasKey } from '../../utils/hasKey';\r\n\r\ninterface ServerFormProps {\r\n    serverId?: string,\r\n    server?: Server,\r\n    uploadServer: (server: Server, isNew: boolean) => void,\r\n    deleteServer: (serverId: string) => void,\r\n    loading?: boolean\r\n}\r\n\r\nexport interface FormElement {\r\n    id: string\r\n    label: string,\r\n    formType: FormType,\r\n    value: string,\r\n    type?: string,\r\n    error?: boolean,\r\n}\r\nexport interface FormBuilder {\r\n    username: FormElement,\r\n    password: FormElement,\r\n    serverName: FormElement,\r\n    serverCountry: FormElement,\r\n    serverIp: FormElement,\r\n    config: FormElement,\r\n}\r\n\r\nconst serverFormBuilder: FormBuilder = {\r\n    username: {\r\n        id: \"username\",\r\n        label: 'Username',\r\n        formType: FormType.INPUT,\r\n        value: '',\r\n        type: 'text',\r\n    },\r\n    password: {\r\n        id: \"password\",\r\n        label: 'Password',\r\n        formType: FormType.INPUT,\r\n        value: '',\r\n        type: 'password',\r\n    },\r\n    serverName: {\r\n        id: \"serverName\",\r\n        label: 'Server Name',\r\n        formType: FormType.INPUT,\r\n        value: '',\r\n        type: 'text',\r\n    },\r\n    serverCountry: {\r\n        id: \"serverCountry\",\r\n        label: 'Server Country',\r\n        formType: FormType.COUNTRY,\r\n        value: '',\r\n    },\r\n    serverIp: {\r\n        id: \"serverIp\",\r\n        label: 'Server Address',\r\n        formType: FormType.INPUT,\r\n        value: '',\r\n        type: 'text',\r\n    },\r\n    config: {\r\n        id: \"config\",\r\n        label: 'Config',\r\n        formType: FormType.TEXTAREA,\r\n        value: '',\r\n    }\r\n}\r\n\r\nconst getDefaultFormElements = (serverId: string | undefined, server: Server | undefined) => {\r\n    var defaultFormElements;\r\n    if (serverId && server) {\r\n        const clonedFormElements = Object.assign({}, serverFormBuilder);\r\n        Object.keys(server).forEach(key => {\r\n            if (hasKey(clonedFormElements, key)) {\r\n                const formElement = clonedFormElements[key]\r\n                formElement.value = server[key]\r\n            }\r\n        })\r\n        defaultFormElements = clonedFormElements\r\n\r\n    } else {\r\n        defaultFormElements = serverFormBuilder\r\n    }\r\n\r\n    return defaultFormElements\r\n}\r\n\r\n\r\n\r\nconst ServerForm = ({ serverId, server, uploadServer, deleteServer, loading }: ServerFormProps) => {\r\n    const [formElements, setFormElements] = useState(getDefaultFormElements(serverId, server))\r\n    \r\n    const isNew = !(serverId && server)\r\n\r\n    console.log(\"IsNew: \", isNew);\r\n\r\n    const handleChange = (id: string, value: string) => {\r\n        const clonedFormElements = Object.assign({}, formElements);\r\n        if (hasKey(clonedFormElements, id)) {\r\n\r\n            const formElement = clonedFormElements[id]\r\n            const clonedElement = {\r\n                ...formElement,\r\n                value\r\n            }\r\n            clonedFormElements[id] = clonedElement\r\n            setFormElements(clonedFormElements);\r\n        }\r\n    }\r\n\r\n\r\n    const isValidForm = () => {\r\n        var valid = false;\r\n        const values = Object.values(formElements) as Array<FormElement>\r\n\r\n        for (let item of values) {\r\n            valid = item.value !== \"\"\r\n            if (!valid) {\r\n                break;\r\n            }\r\n        }\r\n        return valid\r\n    }\r\n\r\n    const showError = () => {\r\n        const clonedFormElements = Object.assign({}, formElements)\r\n        Object.keys(clonedFormElements).forEach(key => {\r\n            if (hasKey(clonedFormElements, key)) {\r\n                const formElement = clonedFormElements[key]\r\n                formElement.error = formElement.value === ''\r\n                setFormElements(clonedFormElements)\r\n            }\r\n        });\r\n    }\r\n\r\n    const clearErrors = () => {\r\n        const clonedFormElements = Object.assign({}, formElements)\r\n        Object.keys(clonedFormElements).forEach(key => {\r\n            if (hasKey(clonedFormElements, key)) {\r\n                const formElement = clonedFormElements[key]\r\n                formElement.error = false\r\n                setFormElements(clonedFormElements)\r\n            }\r\n        });\r\n    }\r\n\r\n    const getServer = () => {\r\n        let newServer: Server = {\r\n            config: formElements.config.value,\r\n            username: formElements.username.value,\r\n            password: formElements.password.value,\r\n            serverName: formElements.serverName.value,\r\n            serverCountry: formElements.serverCountry.value,\r\n            serverIp: formElements.serverIp.value,\r\n        }\r\n\r\n        if (!isNew) {\r\n            if(server)\r\n            newServer.id = server.id\r\n        }\r\n        return newServer\r\n    }\r\n\r\n    const handleSave = () => {\r\n        clearErrors()\r\n        if (isValidForm()) {\r\n            uploadServer(getServer(), isNew)\r\n        } else {\r\n            showError()\r\n        }\r\n    }\r\n\r\n    const handleDelete = () => {\r\n        if (serverId) {\r\n            deleteServer(serverId)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='server-form'>\r\n            {Object.values(formElements).map((item) => {\r\n                return <ServerFormInput id={item.id} key={item.id} type={item.type} label={item.label} value={item.value} onChange={handleChange} formType={item.formType} error={item.error} />\r\n            })}\r\n\r\n            <div className='server-form-buttons'>\r\n                <button disabled={loading} className='btn' onClick={handleSave}>Save</button>\r\n                {!isNew && <button disabled={loading} className='btn-delete' onClick={handleDelete}>Delete</button>}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ServerForm;","import React from 'react';\r\n\r\nconst TopLine = ()=>{\r\n    return (\r\n        <div className=\"top-line\" />\r\n    );\r\n};\r\n\r\nexport default TopLine;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport Top from './TopLine';\r\nimport logo from '../../res/logo.svg';\r\nimport logoutIcon from '../../res/logout.svg';\r\nimport { SERVER_ROUTE } from '../../pages';\r\n\r\ninterface NavBarHomeProps {\r\n    handleLogout: () => void\r\n}\r\n\r\nconst NavBarHome = ({ handleLogout }: NavBarHomeProps) => {\r\n\r\n    return (\r\n        <div>\r\n            <Top />\r\n            <nav className='nav-bar'>\r\n                <div className=\"nav-items\">\r\n                    <img src={logo} alt='Xeen VPN logo' />\r\n                    <p className='selected'>ServerList</p>\r\n                    <Link to={SERVER_ROUTE}>\r\n                        <p className='unselected'>AddServer</p>\r\n                    </Link>\r\n                </div>\r\n                <div className=\"logout\">\r\n                    <p className=\"logout-btn\" onClick={handleLogout}>Logout</p>\r\n                    <img className=\"logout-icon\" src={logoutIcon} alt=\"Logout icon\"/>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NavBarHome;","import React from 'react';\r\nimport { Link, } from 'react-router-dom';\r\n\r\nimport Top from './TopLine';\r\nimport logo from '../../res/logo.svg'\r\nimport logoutIcon from '../../res/logout.svg';\r\nimport { HOME_ROUTE, } from '../../pages';\r\n\r\ninterface NavBarProps {\r\n    handleLogout: () => void\r\n}\r\n\r\nconst NavBar = ({ handleLogout }: NavBarProps) => {\r\n\r\n    return (\r\n        <div>\r\n            <Top />\r\n            <nav className='nav-bar'>\r\n                <div className=\"nav-items\">\r\n                    <img src={logo} alt='Xeen VPN logo' />\r\n                    <Link to={HOME_ROUTE}>\r\n                        <p className='unselected'>ServerList</p>\r\n                    </Link>\r\n\r\n                    <p className='selected'>AddServer</p>\r\n                </div>\r\n\r\n                <div className=\"logout\">\r\n                    <p className=\"logout-btn\" onClick={handleLogout}>Logout</p>\r\n                    <img className=\"logout-icon\" src={logoutIcon} alt=\"Logout icon\"/>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NavBar;","import React from 'react';\r\n\r\nimport Top from './TopLine';\r\nimport back from '../../res/back.svg';\r\nimport logoutIcon from '../../res/logout.svg';\r\n\r\ninterface NavBarProps {\r\n    serverName:string,\r\n    onLogout: () => void,\r\n    handleBackClick: () => void,\r\n}\r\n\r\nconst NavBarEditServer = ({onLogout, serverName, handleBackClick}: NavBarProps) => {\r\n\r\n    return (\r\n        <div>\r\n            <Top />\r\n            <nav className='nav-bar'>\r\n                <div className=\"nav-back\" onClick={handleBackClick}>\r\n                    <img src={back} alt='Xeen VPN logo' />\r\n                    <p>{`Server Details > ${serverName}`} </p>\r\n                </div>\r\n                <div className=\"logout\">\r\n                    <p className=\"logout-btn\" onClick={onLogout}>Logout</p>\r\n                    <img className=\"logout-icon\" src={logoutIcon} alt=\"Logout icon\"/>\r\n                </div>\r\n            </nav>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default NavBarEditServer;","import React from 'react';\r\nimport ServerInterface from '../../interfaces/Server';\r\nimport { Link } from 'react-router-dom';\r\n\r\ninterface ServerProps {\r\n    item: ServerInterface\r\n}\r\n\r\nconst Server = ({ item }: ServerProps) => {\r\n    return (\r\n        <Link to={`/Server/${item.id}`}>\r\n            <div className=\"server-item\">\r\n                <img src={`https://www.countryflags.io/${item.serverCountry}/shiny/64.png`} alt='Country flag' />\r\n                <div className='server-item-text'>\r\n                    <h3>{item.serverName}</h3>\r\n                    <p>{item.serverIp}</p>\r\n                </div>\r\n            </div>\r\n        </Link>\r\n\r\n    );\r\n};\r\n\r\nexport default Server;","import React from 'react';\r\nimport ServerComp from './Server';\r\nimport Server from '../../interfaces/Server';\r\n\r\ninterface ServerListProps{\r\n    items:Server[],\r\n}\r\n\r\nconst ServerList = ({items}:ServerListProps)=>{\r\n    console.log(\"Items\", items)\r\n    return (\r\n        <div className='servers-list'>\r\n            \r\n            {\r\n                items.map((item)=>{\r\n                   return <ServerComp key={item.id} item={item}/>\r\n                })\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ServerList;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { SERVER_ROUTE } from '../../pages';\r\nimport Server from '../../res/server.svg';\r\n\r\n\r\nconst EmptyServer = () => {\r\n    return (\r\n        <div className=\"empty-server\">\r\n            <img src={Server} alt=\"Server Icon\" />\r\n            <p>No servers yet</p>\r\n            <Link to={SERVER_ROUTE}>\r\n                <p className=\"btn\">Add a server</p>\r\n            </Link>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default EmptyServer;","import React from 'react';\r\nimport Modal from 'react-modal';\r\n\r\ninterface ConfirmDialogProps {\r\n    isOpen: boolean,\r\n    title?: string,\r\n    message?: string,\r\n    onRequestClose: () => void,\r\n    onConfirm: () => void,\r\n}\r\n\r\nconst ConfirmDialog = ({ isOpen, onRequestClose, title = \"Confirm Action\", message = \"Are you sure you want to delete\", onConfirm }: ConfirmDialogProps) => {\r\n    Modal.setAppElement('#root');\r\n    return <Modal\r\n        isOpen={isOpen}\r\n        contentLabel='Are you sure you want to delete?'\r\n        onRequestClose={onRequestClose}\r\n        className='confirm-dialog-content'\r\n        overlayClassName='confirm-dialog-overlay'\r\n    >\r\n\r\n        <div className=\"confirm-dialog-root\">\r\n\r\n            <h3>{title}</h3>\r\n            <p>{message}</p>\r\n\r\n        <div className=\"confirm-dialog-buttons\">\r\n            <button className='btn btn-cancel' onClick={onRequestClose}>Cancel</button>\r\n            <button className='btn btn-confirm' onClick={onConfirm}>Okay</button>\r\n        </div>\r\n        </div>\r\n\r\n\r\n    </Modal>\r\n}\r\n\r\nexport default ConfirmDialog;","export const CONFIG = {\r\n    serverUrl: 'http://134.122.124.193/:4002/api'\r\n}","import LoginResponse from \"../interfaces/LoginResponse\";\r\n\r\nexport const LOGGED_IN_KEY = \"xeen:loggedIn\";\r\nexport const TOKEN = \"xeen:token\";\r\n\r\ninterface LoggedIn {\r\n    loggedIn: boolean,\r\n}\r\n\r\nconst DEFAULT_LOGIN_RESPONSE = {\r\n    id:'',\r\n    userId:'',\r\n    ttl:'',\r\n    created: '',\r\n}\r\n\r\nconst LOGGED_IN_DEFAULT = {\r\n    loggedIn: false\r\n}\r\n\r\nconst setLoggedIn = (loggedIn: boolean) => {\r\n    localStorage.setItem(LOGGED_IN_KEY, JSON.stringify({ loggedIn }));\r\n}\r\n\r\nconst getLoggedIn = (): LoggedIn => {\r\n    return JSON.parse(localStorage.getItem(LOGGED_IN_KEY) ?? JSON.stringify(LOGGED_IN_DEFAULT));\r\n}\r\n\r\nconst setLoginResponse = (token: LoginResponse) => {\r\n    localStorage.setItem(TOKEN, JSON.stringify(token));\r\n}\r\n\r\nconst clearLoginResponse = ()=>{\r\n    localStorage.setItem(TOKEN, JSON.stringify(DEFAULT_LOGIN_RESPONSE));\r\n}\r\n\r\nconst getLoginResponse = (): LoginResponse => {\r\n    return JSON.parse(localStorage.getItem(TOKEN) ?? JSON.stringify(DEFAULT_LOGIN_RESPONSE));\r\n}\r\n\r\n\r\n\r\nexport { setLoggedIn, getLoggedIn, setLoginResponse, getLoginResponse, clearLoginResponse};","import axios from 'axios';\r\n\r\nimport {CONFIG} from '../config';\r\n\r\nimport {getLoginResponse} from './localStorage';\r\n\r\nimport * as AxiosLogger from 'axios-logger';\r\nimport Server from '../interfaces/Server';\r\n\r\nconst getAPI = ()=>{\r\n  const API = axios.create({\r\n    baseURL: CONFIG.serverUrl\r\n  });\r\n\r\n const response = getLoginResponse(); \r\n\r\n console.log(\"TOKEN\", response);\r\n\r\n API.interceptors.request.use(AxiosLogger.requestLogger, AxiosLogger.errorLogger);\r\n API.interceptors.response.use(AxiosLogger.responseLogger, AxiosLogger.errorLogger);\r\n\r\nAPI.defaults.headers.common['Authorization'] = response.id;\r\nreturn API;\r\n}\r\n\r\nexport interface LoginBody{\r\n  username: string,\r\n   password: string, \r\n   realm:'admin',\r\n}\r\n\r\nexport const doLogin = (loginBody:LoginBody)=>{\r\n  return getAPI().post('/users/login', loginBody)\r\n}\r\n\r\nexport const doGetServers = ()=> {\r\n  return getAPI().get(`/Servers`);\r\n}\r\n\r\nexport const doLogout = ()=> {\r\n  return getAPI().post('/Users/logout')\r\n}\r\n\r\nexport const doUpdateServer = (server:Server)=> {\r\n  return  getAPI().patch(`/Servers`, server)\r\n}\r\n\r\nexport const doAddNewServer = (server: Server)=> {\r\n  return  getAPI().post('/Servers', server)\r\n}\r\n\r\nexport const doDeleteServer = (serverId:string | undefined) =>{\r\n  return getAPI().delete(`/Servers/${serverId}`)\r\n}\r\n\r\nexport default getAPI;\r\n","import {setLoggedIn, setLoginResponse, clearLoginResponse} from './localStorage';\r\nimport LoginResponse from '../interfaces/LoginResponse';\r\n\r\nexport const setLoggedInLocally = (response:LoginResponse)=>{\r\n    setLoggedIn(true);\r\n    setLoginResponse(response);\r\n}\r\n\r\nexport const logOutLocally = ()=>{\r\n    setLoggedIn(false);\r\n    clearLoginResponse();\r\n}","import {TOGGLE_LOADING, ToggleLoadingAction} from './types';\r\n\r\nexport const toggleLoading = (isLoading:boolean) : ToggleLoadingAction=> {\r\n    return {\r\n        type :TOGGLE_LOADING,\r\n        payload: isLoading,\r\n    }\r\n}","import {\r\n    DISPLAY_ERROR,\r\n    DisplayErrorAction,\r\n    DisplayError\r\n} from './types';\r\n\r\nexport const displayError = (displayError: DisplayError): DisplayErrorAction => {\r\n    return {\r\n        type: DISPLAY_ERROR,\r\n        payload: displayError,\r\n    }\r\n}","import { AxiosError } from \"axios\"\r\nimport ServerErrorWrapper from \"../interfaces/ServerErrorWrapper\";\r\n\r\nexport const errorHandler = (error: Error) =>{\r\n    console.error(error);\r\n    if(isAxiosError(error)){\r\n        return axiosErrorHandler(error);\r\n    }else {\r\n        return \"An error ocurred. Please try again!\"\r\n    }\r\n}\r\n\r\nexport const axiosErrorHandler = (err: AxiosError) =>{\r\n    if (err.response) {\r\n        const error = err.response.data as ServerErrorWrapper\r\n        console.error(error);\r\n        if (error.error.statusCode === 401) {\r\n            return \"Operation could not complete. Please login again\"\r\n        } else {\r\n            return error.error.message\r\n        }\r\n    }else{\r\n        return \"An error ocurred!\"\r\n    }\r\n}\r\n\r\nfunction isAxiosError(error: Error | AxiosError): error is AxiosError {\r\n    return (error as AxiosError).response !== undefined;\r\n}","import { Action } from \"redux\";\r\nimport { ThunkAction } from \"redux-thunk\";\r\nimport { setServers } from \"../store/servers/actions\";\r\nimport { toggleLoading } from \"../store/loading/actions\";\r\nimport { displayError } from \"../store/showerror/actions\";\r\nimport { AppState } from \"../store\";\r\nimport Server from \"../interfaces/Server\";\r\nimport { errorHandler } from \"./errorHandler\";\r\nimport { doGetServers } from \"./API\";\r\n\r\nexport const getServers = (): ThunkAction<void, AppState, null, Action<string>> => async dispatch => {\r\n    try {\r\n        dispatch(displayError({ show: false }));\r\n        dispatch(toggleLoading(true));\r\n        const response = await doGetServers();\r\n        dispatch(setServers(response.data as Array<Server>));\r\n        dispatch(toggleLoading(false));\r\n    } catch (err) {\r\n        dispatch(toggleLoading(false));\r\n        const message = errorHandler(err)\r\n        dispatch(displayError({ message: message, show: true }))\r\n    }\r\n};\r\n","import React, { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nimport {\r\n    NavBarHome,\r\n    ServerList,\r\n    EmptyServer,\r\n    Loading,\r\n    DisplayError as ShowError,\r\n} from '../../components';\r\n\r\n// import serversData from '../../data/servers.json';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\nimport { LOGIN_ROUTE } from '..';\r\nimport  { doLogout } from '../../utils/API';\r\nimport { AxiosResponse, AxiosError } from 'axios';\r\nimport { logOutLocally } from '../../utils/authHandler';\r\nimport { ServerState } from '../../store/servers/types';\r\nimport { getServers } from '../../utils/downloadServer';\r\nimport { AppState } from '../../store';\r\nimport { DisplayError } from '../../store/showerror/types';\r\n\r\n\r\ninterface HomeState {\r\n    getServers: any,\r\n    servers: ServerState,\r\n    isLoading: boolean,\r\n    displayError: DisplayError\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        servers: state.servers,\r\n        isLoading: state.loading.isLoading,\r\n        displayError: state.showError.displayError,\r\n    }\r\n}\r\n\r\n\r\nconst HomePage = (props: HomeState) => {\r\n    //TODO: Fetch list\r\n    const { servers, getServers, isLoading, displayError } = props\r\n    const [loading, setLoading] = useState(false);\r\n    const serversData = Object.values(servers.servers ? servers.servers : []);\r\n\r\n    useEffect(() => {\r\n        getServers();\r\n    }, [getServers])\r\n\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    const { from }: any = location.state || { from: { pathname: LOGIN_ROUTE } };\r\n\r\n    const showLoading = () => {\r\n        setLoading(true);\r\n    }\r\n\r\n    const hideLoading = () => {\r\n        setLoading(false)\r\n    }\r\n\r\n    const handleLogOut = () => {\r\n        showLoading()\r\n        doLogout()\r\n            .then((res: AxiosResponse) => {\r\n                hideLoading()\r\n                deleteLocalDataAndGoToLogin()\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                hideLoading()\r\n                console.error(error);\r\n                deleteLocalDataAndGoToLogin();\r\n            })\r\n    }\r\n\r\n    const deleteLocalDataAndGoToLogin = () => {\r\n        logOutLocally();\r\n        history.replace(from);\r\n    }\r\n\r\n    return (\r\n\r\n        <div className='container'>\r\n            <NavBarHome handleLogout={handleLogOut} />\r\n            {(loading || isLoading) && <Loading />}\r\n            {(displayError.show) && <ShowError message={displayError.message ?? \"An error occurred\"} />}\r\n            <div className=\"server-root\">\r\n                {serversData && serversData.length > 0 && <ServerList items={serversData} />}\r\n                {(!serversData || serversData.length <= 0) && <EmptyServer />}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default connect(mapStateToProps, { getServers })(HomePage);","import {SET_SERVERS} from './types';\r\nimport Server from '../../interfaces/Server';\r\n\r\nexport const setServers = (servers: Array<Server>)=> {\r\n    return {\r\n        type :SET_SERVERS,\r\n        payload: servers,\r\n    }\r\n}","export const HOME_ROUTE = \"/\";","import HomePage from './HomePage';\r\nimport {HOME_ROUTE} from './constants';\r\n\r\nexport default  HomePage;\r\n\r\nexport {HOME_ROUTE};","export const LOGIN_ROUTE = \"/login\";","import LoginPage from './LoginPage';\r\nimport {LOGIN_ROUTE} from './constants';\r\n\r\nexport default LoginPage;\r\nexport {\r\n    LOGIN_ROUTE,\r\n}","import React, { useState } from 'react';\r\nimport { useHistory, useLocation } from 'react-router-dom';\r\n\r\nimport { LoginForm } from '../../components';\r\nimport { AxiosError } from 'axios';\r\nimport ServerErrorWrapper from '../../interfaces/ServerErrorWrapper';\r\nimport LoginResponse from '../../interfaces/LoginResponse';\r\n\r\nimport {\r\n    setLoggedInLocally\r\n} from '../../utils/authHandler';\r\nimport { HOME_ROUTE } from '..';\r\nimport { doLogin } from '../../utils/API';\r\n\r\nconst LoginPage = () => {\r\n\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    const { from }: any = location.state || { from: { pathname: HOME_ROUTE } };\r\n\r\n    const login = (username: string, password: string) => {\r\n        setErrorMessage('');\r\n        setLoading(true);\r\n        doLogin({ username, password, realm:'admin' })\r\n            .then(res => {\r\n                setLoading(false);\r\n                const response = res.data as LoginResponse\r\n                console.log(\"res: \", res)\r\n                setLoggedInLocally(response);\r\n                history.replace(from);\r\n            }).catch((err: AxiosError) => {\r\n                setLoading(false);\r\n                if (err.response) {\r\n                    const error = err.response.data as ServerErrorWrapper\r\n                    console.error(error);\r\n                    if (error.error.statusCode === 401) {\r\n                        setErrorMessage(\"Login failed, check your credentials\");\r\n                    } else {\r\n                        setErrorMessage(error.error.message);\r\n                    }\r\n                }else{\r\n                    setErrorMessage(\"An error ocurred!\");\r\n                }\r\n                console.error(err);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div className='login-container'>\r\n            <div className='side-image' />\r\n            <LoginForm login={login} errorMessage={errorMessage} loading={loading} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoginPage;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nimport {\r\n    ServerForm,\r\n    NavBarHomeAddServer,\r\n    NavBarHomeEditServer,\r\n    ConfirmDialog,\r\n    Loading,\r\n    DisplayError,\r\n} from '../../components';\r\nimport { useParams, useHistory, useLocation } from 'react-router-dom';\r\nimport Server from '../../interfaces/Server';\r\nimport { doLogout, doAddNewServer, doUpdateServer, doDeleteServer } from '../../utils/API';\r\nimport { AxiosError, AxiosResponse } from 'axios';\r\nimport { LOGIN_ROUTE } from '../login';\r\nimport { logOutLocally } from '../../utils/authHandler';\r\nimport { HOME_ROUTE } from '..';\r\nimport { ServerState } from '../../store/servers/types';\r\nimport { connect, } from 'react-redux';\r\nimport { AppState } from '../../store';\r\nimport getAPI from '../../utils/API';\r\nimport { errorHandler } from '../../utils/errorHandler';\r\n\r\ninterface ServerInfoState {\r\n    servers: ServerState\r\n}\r\n\r\nconst mapStateToProps = (state: AppState) => {\r\n    return {\r\n        servers: state.servers\r\n    }\r\n}\r\n\r\n\r\nconst ServerInfoPage = ({ servers }: ServerInfoState) => {\r\n    const defaultErrorMessage = ''\r\n    const { id } = useParams();\r\n    const defaultServer: Server = { config: \"\", password: \"\", serverCountry: \"\", serverIp: \"\", serverName: \"\", username: \"\" }\r\n    const [loading, setLoading] = useState(false);\r\n    const [showDeleteDialog, setShowDeleteDialog] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState(defaultErrorMessage);\r\n    const [server, setServer] = useState(defaultServer);\r\n    const serversData = servers.servers\r\n\r\n\r\n    const handleError = (error: AxiosError) => {\r\n        const message = errorHandler(error);\r\n        setErrorMessage(message);\r\n        console.error(error)\r\n        hideLoading();\r\n    }\r\n\r\n    const showLoading = () => {\r\n        setLoading(true);\r\n        resetErrorMessage()\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (id) {\r\n            const cachedServer = serversData[id];\r\n            if (cachedServer) {\r\n                setServer(cachedServer)\r\n            } else {\r\n                setLoading(true);\r\n                setErrorMessage(defaultErrorMessage);\r\n                getAPI().get(`/Servers/${id}`)\r\n                    .then((res: AxiosResponse) => {\r\n                        setLoading(false)\r\n                        const remoteServer = res.data as Server\r\n                        setServer(remoteServer)\r\n                    }).catch((err: AxiosError) => {\r\n                        const message = errorHandler(err);\r\n                        setErrorMessage(message);\r\n                        setLoading(false);\r\n                    })\r\n            }\r\n        }\r\n    }, [id, serversData]);\r\n\r\n\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    const { fromLogin }: any = location.state || { fromLogin: { pathname: LOGIN_ROUTE } };\r\n    // const { fromHome }: any = location.state || { fromHome: { pathname: HOME_ROUTE } };\r\n\r\n\r\n    const handleLogOut = () => {\r\n        doLogout()\r\n            .then((res: AxiosResponse) => {\r\n                deleteLocalDataAndGoToLogin()\r\n            })\r\n            .catch((error: AxiosError) => {\r\n                console.error(error);\r\n                deleteLocalDataAndGoToLogin();\r\n            })\r\n    }\r\n\r\n    const deleteLocalDataAndGoToLogin = () => {\r\n        logOutLocally();\r\n        history.replace(fromLogin);\r\n    }\r\n\r\n    const uploadServer = (server: Server, isNew: boolean) => {\r\n        console.log(\"SERVER, isnew\", server, isNew)\r\n        showLoading();\r\n        if (isNew) {\r\n            doAddNewServer(server)\r\n                .then((res: AxiosResponse) => {\r\n                    handleResponse(res);\r\n                }).catch((error: AxiosError) => {\r\n                    handleError(error);\r\n                });\r\n        } else {\r\n            doUpdateServer(server)\r\n                .then((res: AxiosResponse) => {\r\n                    handleResponse(res);\r\n                }).catch((error: AxiosError) => {\r\n                    handleError(error);\r\n                });\r\n        }\r\n    }\r\n\r\n    const resetErrorMessage = () => {\r\n        setErrorMessage(defaultErrorMessage);\r\n    }\r\n\r\n    const handleResponse = (res: AxiosResponse) => {\r\n        console.log(res);\r\n        hideLoading();\r\n        resetServer();\r\n        history.push(HOME_ROUTE);\r\n    }\r\n\r\n    const hideLoading = () => {\r\n        setLoading(false)\r\n    }\r\n\r\n    const deleteServer = (id: string) => {\r\n        openDeleteConfimDialog()\r\n    }\r\n\r\n    const handleBackClick = () => {\r\n        resetServer()\r\n        history.goBack();\r\n    }\r\n\r\n    const openDeleteConfimDialog = () => {\r\n        setShowDeleteDialog(true)\r\n    }\r\n    const closeDeleteConfimDialog = () => {\r\n        setShowDeleteDialog(false)\r\n    }\r\n\r\n    const resetServer = () => {\r\n        setServer(defaultServer);\r\n    }\r\n\r\n    const confirmDelete = () => {\r\n        doDeleteServer(id)\r\n            .then((res: AxiosResponse) => {\r\n                handleResponse(res);\r\n            }).catch((error: AxiosError) => {\r\n                handleError(error);\r\n            });\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            {id && <NavBarHomeEditServer onLogout={handleLogOut} serverName={server ? (server as Server).serverName : \"\"} handleBackClick={handleBackClick} />}\r\n            {!id && <NavBarHomeAddServer handleLogout={handleLogOut} />}\r\n            {loading && <Loading />}\r\n            {(errorMessage.length > 0) && <DisplayError message={errorMessage ?? \"An error occurred\"} />}\r\n            <div className=\"server-form-root\">\r\n                <ServerForm serverId={id} server={server} uploadServer={uploadServer} deleteServer={deleteServer} loading={loading} />\r\n            </div>\r\n            <ConfirmDialog\r\n                onConfirm={confirmDelete}\r\n                isOpen={showDeleteDialog}\r\n                onRequestClose={closeDeleteConfimDialog}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default connect(mapStateToProps)(ServerInfoPage);","export const SERVER_ROUTE = \"/server\";","import ServerInfoPage from './ServerInfoPage';\r\nimport { SERVER_ROUTE } from './constants';\r\n\r\nexport default ServerInfoPage;\r\nexport {\r\n    SERVER_ROUTE,\r\n}","import Page404 from './404Page';\r\n\r\nexport default Page404;","import React from 'react';\r\n\r\nconst Page404 = () => {\r\n    return (\r\n        <div>\r\n            Page not found\r\n    </div>\r\n    );\r\n};\r\n\r\nexport default Page404;\r\n","import React from 'react';\nimport {\n  BrowserRouter,\n  Route,\n  Switch,\n  Redirect,\n  RouteProps\n} from 'react-router-dom';\nimport {\n  HomePage, HOME_ROUTE,\n  LoginPage, LOGIN_ROUTE,\n  ServerInfoPage, SERVER_ROUTE,\n  Page404\n} from './pages';\n\nimport './App.css';\nimport { getLoggedIn } from './utils/localStorage';\n\nconst App: React.FC = () => {\n\n  return (\n    <div className=\"App\">\n      <BrowserRouter>\n\n        <Switch>\n          <PrivateRoute exact path={HOME_ROUTE}>\n            <HomePage/>\n          </PrivateRoute>\n          <PrivateRoute path={`${SERVER_ROUTE}/:id`} >\n            <ServerInfoPage/>\n          </PrivateRoute>\n          <PrivateRoute exact path={SERVER_ROUTE}>\n            <ServerInfoPage/>\n          </PrivateRoute>\n          <Route exact path={LOGIN_ROUTE} component={LoginPage} />\n          <Route component={Page404} />\n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nconst PrivateRoute = ({ children, ...rest }: RouteProps) => {\n  //check if authenticated\n  const loggedIn = getLoggedIn();\n  return (\n    <Route\n      {...rest}\n      render={({ location }) =>\n        loggedIn.loggedIn ? (\n          children\n        ) : (\n            <Redirect\n              to={{\n                pathname: LOGIN_ROUTE,\n                state: { from: location }\n              }}\n            />\n          )\n      }\n    />\n  );\n};\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport { Provider } from 'react-redux';\n\nimport configureStore from './store';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst store = configureStore();\n\nconst Root = () => (\n    <Provider store={store}>\n        <App />\n    </Provider>\n);\n\nReactDOM.render(\n    <Root />\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.9a480739.svg\";","module.exports = __webpack_public_path__ + \"static/media/logout.d0404e7b.svg\";","module.exports = __webpack_public_path__ + \"static/media/back.94b6b5e3.svg\";","module.exports = __webpack_public_path__ + \"static/media/server.6ec4fce4.svg\";"],"sourceRoot":""}